<?xml version="1.0" encoding="UTF-8"?>
<specification xmlns="http://docbook.org/ns/docbook"
	       xmlns:xlink="http://www.w3.org/1999/xlink"
	       xmlns:xi='http://www.w3.org/2001/XInclude'
	       xmlns:cs="http://www.w3.org/XML/XProc/2006/04/components#"
	       xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"
	       class="ed"
	       version="5.0-extension w3c-xproc"
	       role="editors-copy">
<info>
<title>XProc: An XML Pipeline Language</title>
<w3c-shortname>xproc</w3c-shortname>
<pubdate>2006-08-19</pubdate>

<bibliorelation class="other" otherclass="alternate" type="isformatof"
		xlink:href="langspec.xml">XML</bibliorelation>

<!-- what about prevlocs? -->

<authorgroup>
  <author>
    <personname>Norman Walsh</personname>
    <affiliation>
      <orgname>Sun Microsystems, Inc.</orgname>
    </affiliation>
    <email>Norman.Walsh@Sun.COM</email>
  </author>
</authorgroup>
  
<abstract>
<para>This document is a shell where ideas, points of consensus, and
early draft text is being collected. It does not necessarily represent
the consensus of the Working Group.</para>
</abstract>

<legalnotice role="status">

<para><emphasis>This section describes the status of this document at
the time of its publication. Other documents may supersede this
document. A list of current W3C publications and the latest revision
of this technical report can be found in the <link
xlink:href="http://www.w3.org/TR/">W3C technical reports index</link>
at http://www.w3.org/TR/.</emphasis></para>

<para>More boilerplate goes here…</para>
</legalnotice>
</info>

<section xml:id="introduction">
<title>Introduction</title>

<para>An XML Pipeline describes a sequence of operations to be
performed on a collection of input documents. Pipelines take zero or more
XML documents as their input and produce zero or more XML documents as
their output. Components in the pipeline <rfc2119>may</rfc2119>
read or write non-XML resources as well.</para>

<para>Each operation in a pipeline is performed by a component. Like
pipelines, components take zero or more XML documents as their input
and produce zero or more XML documents as their output. The inputs to
a component come from the web, from the pipeline document, from the inputs to the
pipeline itself, or from the outputs of other components in the pipeline. The outputs
from a component are either consumed by other components or are
outputs of the pipeline as a whole. (Outputs may also be ignored.)</para>

<para>This specification defines a standard component library,
<xref linkend="std-components"/>.
Pipeline implementations may support additional components as
well.</para>

<para><xref linkend="fig-xival"/> is a graphical representation of a
simple pipeline that performs XInclude processing and validation on a
document.</para>

<figure xml:id="fig-xival">
<title>A simple, linear XInclude/Validate pipeline</title>
<mediaobject>
<alt>A simple, linear XInclude/Validate pipeline</alt>
<imageobject>
<imagedata fileref="graphics/sch-xinclude-validate-pipeline.png"/>
</imageobject>
</mediaobject>
</figure>

<para>This is a pipeline that consists of two components, XInclude and
Validate. The pipeline itself has two inputs, “document” and “schema”.
How these inputs are connected to XML documents is implementation-defined.
The XInclude
component reads the pipeline input “Document” and produces a result
document. The Validate component reads the pipeline input “Schema” and
the output from the XInclude component and produces a
result document. The result of the validation is the result of the
pipeline, “Result Document”.
How pipeline outputs are connected to XML documents is
implementation-defined.</para>

<para><xref linkend="fig-style-proc"/> is a more complex example.</para>

<figure xml:id="fig-style-proc">
<title>A transform and serialize pipeline</title>
<mediaobject>
<alt>A transform and serialize pipeline</alt>
<imageobject>
<imagedata fileref="graphics/sch-xslt-serialize-pipeline.png"/>
</imageobject>
</mediaobject>
</figure>

<para>The heart of this example is the conditional. The standard “choose”
component evaluates an XPath expression over a test document. If the
effective boolean value of the expression is <literal>true</literal>, then
that branch of the pipeline is evaluated. If no expressions are true,
then the “otherwise” branch is evaluated.</para>

<para>Note that the “Serialize” and “FO to PDF” components produce no
output, consequently this pipeline produces no output. This pipeline
transforms the input document with the input stylesheet and, if the
result is an XSL-FO document, generates PDF. If the result is not
XSL-FO, the pipeline assumes that it is XHTML and runs Tidy over it
before serializing it.
</para>
</section>

<section xml:id="pipeline-concepts">
<title>Pipeline Concepts</title>

<para><termdef xml:id="dt-pipeline">A <glossterm>pipeline</glossterm>
is an acyclic, directed graph of components connected together by
input