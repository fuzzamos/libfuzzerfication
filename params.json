{
  "name": "Libfuzzerfication",
  "tagline": "libfuzzerfication - fuzzing for the rest of us!",
  "body": "\r\n# libfuzzerfication\r\nLibFuzzerfication is a project thats purpose is to do fuzz-testing for applications and libraries.\r\n\r\n<img src=\"https://raw.githubusercontent.com/ouspg/libfuzzerfication/master/pictures/fuzzing_lua.gif\" width=\"716\" height=\"393\" alt=\"Fuzzing in action\">\r\n\r\n# About\r\nPurpose of fuzzing is to automatically generate lots of test input and to make code crash and increase code coverage. [libFuzzer](http://llvm.org/docs/LibFuzzer.html) is a library for in-process, coverage-guided evolutionary fuzzing of other libraries. It is similiar to [American Fuzzy Lop (AFL)](http://lcamtuf.coredump.cx/afl/) but performs fuzzing inside single process and is much faster.\r\n\r\n# Motivation\r\nThere have been lots of vulnerabilities in popular libraries that should have been (theoretically) easy to test. We want to offer easy way to fuzz-test these libraries and increase awareness about the situation. We also want this to be available to everyone.\r\n\r\nWe have list of top 50 most used libraries from [Protecode SC](http://www.codenomicon.com/products/appcheck/).\r\n\r\nCurrently our top targets are:\r\n* libxslt\r\n* speex\r\n* libflac\r\n* gstreamer\r\n\r\nThis project is currently in very early stage of development. You're welcome to collaborate!\r\n\r\nThis is part of [OUSPG-open](https://github.com/ouspg/ouspg-open)\r\n\r\n# About libfuzzer\r\n* LibFuzzer is open-source library (part of LLVM)\r\n* Relies on compiler instrumentation to get coverage feedback\r\n* It is linked with the library under test\r\n* Works fully in process -> Fast!\r\n\r\nLibFuzzer itself can be built with any compiler without specific flags. Target code must be buit with Clang using [ASan](http://clang.llvm.org/docs/AddressSanitizer.html), [USan](http://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html) or [MSan](http://clang.llvm.org/docs/MemorySanitizer.html) and -fsanitize-coverage=edge[,8bit-counters,trace-cmp,indirect-calls]\r\n\r\n# How does this project work?\r\n* You pull container from Dockerhub\r\n* Start Writing your own libfuzzer stub\r\n* Share dockerfile with other users\r\n* Use libFuzzer to collect corpus so that other people can continue where you left off\r\n\r\nYou can start writing stubs without docker.\r\n\r\n# Requirements\r\n* [docker-machine version 0.7.0](https://docs.docker.com/machine/)\r\n* [Docker version 1.11.2](https://www.docker.com/)\r\n* [docker-compose version 1.7.1](https://docs.docker.com/compose/)\r\n\r\n# Material\r\n* [libFuzzer](http://llvm.org/docs/LibFuzzer.html)\r\n* [SanitizerCoverage](http://clang.llvm.org/docs/SanitizerCoverage.html)\r\n* You can find some nice examples from: [libfuzzer-bot repo](https://github.com/google/libfuzzer-bot)\r\n* [libFuzzer in Chrome](https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/README.md)\r\n* [Efficient Fuzzer](https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/efficient_fuzzer.md)\r\n\r\n# Sample files\r\nThese downloads can be used as initial corpus directories for more efficient fuzzing.\r\n\r\n**Notice!**\r\n\r\nThe links are currently down when we are creating new sample directories for multiple file formats.\r\n\r\n<p>Coming soon &trade;<p>\r\n\r\n###### HTTP Direct Downloads\r\n  * [MP3](http://storage.googleapis.com/libfuzzerfication/downloads/samples/samples-mp3-20160630.tar.gz)\r\n\r\n###### Checksums\r\n* [SHA256](http://storage.googleapis.com/libfuzzerfication/downloads/samples/sha256sums.txt)\r\n\r\n# Tracking\r\n[Target tracking sheet](https://docs.google.com/spreadsheets/d/1oj0L44gKTn3wlrJk6b554b9o8H0r1bVfb6LJrw62BEE/pubhtml)\r\n\r\n# Team\r\n* Mikko Yliniemi (@mikessu)\r\n* Atte Kettunen (@attekett)\r\n* Pauli Huttunen (@WhiteEyeDoll)\r\n\r\nVisit #ouspg @ IRCnet if you're interested!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}