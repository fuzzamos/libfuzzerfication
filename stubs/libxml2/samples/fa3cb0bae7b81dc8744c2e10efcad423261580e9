<?xml version=\"1.0\"?>
<demo>
	<!-- loads a song(MP3 or WAV) from data/ and set the beats-per-minute -->
	<song file="" bpm="" start="" stop="" looping=""/>
	
	<!-- -->
	<framebuffers>
		<!--
			width:
				width in pixels
				"screen" with an optional divisor
			height:
				heigth in pixels
				"screen" with an optional divisor
			format:
				red_8
				red_green_88
				rgb_888
				rgba_8888
				depth_16
				depth_24
				depth_32
				depth_stencil_24_8
				red_fp16
				red_fp32
				depth_fp32
				rgba_fp16
				rgba_fp32
				rgba_fp32
				depth_stencil_fp32_8
		-->
		<texture name="" width="" height="" format="">
			<!-- default sampler for the FBO textures: mag=nearest min=nearest s=edge t=edge r=edge -->
			<sampler>
				<!-- filtering modes: nearest, linear, nearest mipmap nearest, linear mipmap nearest, nearest mipmap linear, linear mipmap linear, anisotropic: 0..1 -->
				<filtering mag="nearest" min="nearest" anisotropic="0.0"/>
				<!-- wrap modes: edge, repeat, border, mirrored repeat -->
				<wrap s="edge" t="edge" r="edge"/>
			</sampler>
		</texture>
		<!-- cubemaps use the same width, height and format definition as the fbo textures -->
		<cubemap name="" width="" height="" format="">
			<sampler>
				<filtering mag="nearest" min="nearest"/>
				<wrap s="edge" t="edge" r="edge"/>
			</sampler>
		</cubemap>

		<!-- renderbuffers use the same width, height and format definition as the fbo textures -->
		<renderbuffer name="" width="" height="" format="" />

		<fbo name="">
			<!--
				buffer: name of fbo texture to attach
				types:
					color0
					color1
					color2
					color3
					color4
					color5
					color6
					color7
					depth
					stencil
					depth_stencil
			-->
			<attachment type="" buffer="" />
		</fbo>
	</framebuffers>
	
	<!-- loads shaders from data/shaders -->
	<shaders>
		<!-- load the named shader program. By default we assume that vert and frag is enabled. -->
		<program name="shaderbasename" vert="yes" geom="yes" frag="yes" tess="yes" comp="yes">
			<!-- feedback varying type (default is interleaved): interleaved, separate -->
			<feedback type="interleaved">
				<varying name="out.position"/>
				<varying name="out.normal"/>
				<varying name="out.color"/>
				<varying name="out.uv"/>
			</feedback>
			<!-- per texture sampler state (you can only have one defined per sampler) -->
			<sampler name="nameOfSamplerInShader">
				<!-- filtering modes: nearest, linear, nearest mipmap nearest, linear mipmap nearest, nearest mipmap linear, linear mipmap linear  -->
				<filtering mag="linear" min="linear"/>
				<!-- wrap modes: edge, repeat, border, mirrored repeat -->
				<wrap s="repeat" t="repeat" r="repeat"/>
				<!-- depth compare mode: ref, none, depth compare function: always,less,lequal,equal,nequal,gequal,greater,never -->
				<depth mode="none" func="lequal"/>
				<!-- level of detail -->
				<lod min="-1000.0" max="1000.0" bias="0.0"/>
				<!-- border color -->
				<border r="0.0" g="0.0" b="0.0" a="0.0"/>
			</sampler>
		</program>
	</shaders>

	<!-- loads textures and cubemaps from data/textures -->
	<textures>
		<!-- Note - we use both "name" and "file" so we can decoupe the actuall image from its name inside the demo executable -->
		<!-- the premult attribute is "no" by default -->
		<image name="goat2-diffuse" file="goat2-S7003128.png" premult="yes">
			<!-- setup the texel filtering and coordinate wrap modes. Note that if TextureState isn't present, sane defaults are used. -->
			<sampler>
				<!-- filtering modes: nearest, linear, nearest mipmap nearest, linear mipmap nearest, nearest mipmap linear, linear mipmap linear -->
				<filtering mag="linear mipmap linear" min="linear"/>
				<!-- wrap modes: edge, repeat, border, mirrored repeat -->
				<wrap s="repeat" t="repeat" r="edge"/>
			</sampler>
		</image>
		<cubemap name="" file="">
			<sampler>...</sampler>
		</cubemap>
	</textures>

	<!-- loads 3d models from data/models -->
	<models>
		<!-- Note - we use both "name" and "file" so we can decoupe the actuall mesh from its name inside the demo executable -->
		<mesh name="" file=""/>
	</models>
</demo>
